QWidget* mainWidget() const;
virtual void polish(QWidget* w);
QWidget* focusWidget() const;
QWidget* activeWindow() const;
void processEvents();
void processEvents(int maxtime);
bool hasPendingEvents();
virtual bool notify(QObject* receiver, QEvent* e);
QString translate(const char* context, const char* sourceText, const char* comment=0, QApplication::Encoding encoding=QApplication::DefaultCodec) const;
QString applicationDirPath();
QString applicationFilePath();
bool isSessionRestored() const;
QString sessionId() const;
QString sessionKey() const;
# QStyle& style();
void setStyle(QStyle* style);
QStyle* setStyle(const QString& style);
int colorSpec();
void setColorSpec(int spec);
_QCursor* overrideCursor();
void setOverrideCursor(QCursor* cursor, bool replace=FALSE);
void restoreOverrideCursor();
bool hasGlobalMouseTracking();
void setGlobalMouseTracking(bool enable);
QPalette palette(const QWidget* w=0);
void setPalette(const QPalette& palette, bool informWidgets=FALSE, const char* className=0);
QFont font(const QWidget* w=0);
void setFont(const QFont& font, bool informWidgets=FALSE, const char* className=0);
QFontMetrics* fontMetrics();
QDesktopWidget* desktop();
QWidget* activePopupWidget();
QWidget* activeModalWidget();
QClipboard* clipboard();
QWidget* widgetAt(int x, int y, bool child=FALSE);
QWidget* widgetAt(const QPoint& pos, bool child=FALSE);
QEventLoop* eventLoop();
bool sendEvent(QObject* receiver, QEvent* event);
void postEvent(QObject* receiver, QEvent* event);
void sendPostedEvents(QObject* receiver, int event_type);
void sendPostedEvents();
void removePostedEvents(QObject* receiver);
bool startingUp();
bool closingDown();
void setDesktopSettingsAware(bool on);
bool desktopSettingsAware();
void setCursorFlashTime(int msecs);
int cursorFlashTime();
void setDoubleClickInterval(int ms);
int doubleClickInterval();
void setWheelScrollLines(int n);
int wheelScrollLines();
void setGlobalStrut(const QSize& strut);
QSize globalStrut();
void setLibraryPaths(const QStringList& paths);
QStringList libraryPaths();
void addLibraryPath(const QString& path);
void removeLibraryPath(const QString& path);
void setStartDragTime(int ms);
int startDragTime();
void setStartDragDistance(int l);
int startDragDistance();
void setReverseLayout(bool b);
bool reverseLayout();
int horizontalAlignment(int align);
void quit();
void closeAllWindows();
void aboutQt();
void reinit();
FLSqlDatabase* db();
void setMainWidget(QWidget* mainWidget);
QSArgument call(const QString& function, const QString& nameObjectContext) const;
void activateModule(const QString& idM);
void execMainScript(const QString& n);
void aboutAbanQ();
void chooseFont();
void showStyles();
void setDatabaseLockDetection(bool on=true, int msecLapsus=30000, int limChecks=-1, bool showWarn=true, const QString& msgWarn=QString::null, const QString& connectionName=QString::null);
QString commaSeparator() const;
void setNotifyBeginTransaction(bool b=true);
void setNotifyEndTransaction(bool b=true);
void setNotifyRollbackTransaction(bool b=true);
bool notifyBeginTransaction() const;
bool notifyEndTransaction() const;
bool notifyRollbackTransaction() const;
AQApplication* self();
void staticLoaderSetup();
void openQSWorkbench();
QSWorkbench* workbench() const;
void showConsole();
bool consoleShown() const;
void generalExit(bool askExit=true);
void setProxyDesktop(QWidget* w);
void startTimerIdle();
void stopTimerIdle();
